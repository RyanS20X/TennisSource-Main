// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisSource.Data;

#nullable disable

namespace TennisSource.Migrations
{
    [DbContext(typeof(TennisSourceContext))]
    partial class TennisSourceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("TennisPlayerTennisTournament", b =>
                {
                    b.Property<int>("EventsParticipatedInTennisTournamentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventsParticipatedInTennisTournamentId", "PlayersId");

                    b.HasIndex("PlayersId");

                    b.ToTable("TennisPlayerTennisTournament");
                });

            modelBuilder.Entity("TennisSource.Models.TennisPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TennisPlayer");
                });

            modelBuilder.Entity("TennisSource.Models.TennisTournament", b =>
                {
                    b.Property<int>("TennisTournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TennisPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TennisTournamentId");

                    b.ToTable("TennisTournament");
                });

            modelBuilder.Entity("TennisPlayerTennisTournament", b =>
                {
                    b.HasOne("TennisSource.Models.TennisTournament", null)
                        .WithMany()
                        .HasForeignKey("EventsParticipatedInTennisTournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisSource.Models.TennisPlayer", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
